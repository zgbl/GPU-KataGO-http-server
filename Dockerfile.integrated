# 整合版 KataGo HTTP Server Dockerfile
# 结合最新GPU KataGo引擎和HTTP API服务器
# 基于CUDA 12.9.1和Ubuntu 22.04构建

FROM nvidia/cuda:12.9.1-cudnn-devel-ubuntu22.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_VISIBLE_DEVICES=0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV PATH="/app/bin:$PATH"

# 设置工作目录
WORKDIR /app

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    libzip-dev \
    zlib1g-dev \
    python3 \
    python3-pip \
    python3-dev \
    libboost-all-dev \
    libtcmalloc-minimal4 \
    google-perftools \
    libgoogle-perftools-dev \
    curl \
    file \
    && rm -rf /var/lib/apt/lists/*

# 创建必要的目录
RUN mkdir -p /app/logs /app/models /app/configs /app/bin /app/http_server

# 复制KataGo源代码
COPY KataGo-BlackRice/cpp/ /app/cpp/

# 编译最新版GPU KataGo
RUN cd /app/cpp && \
    cmake . -DUSE_BACKEND=CUDA -DUSE_TCMALLOC=1 -DBUILD_MCTS=1 \
    -DCMAKE_BUILD_TYPE=Release -DUSE_AVX2=1 -DNO_GIT_REVISION=1 && \
    make -j$(nproc) && \
    cp katago /app/bin/

# 复制HTTP服务器代码
COPY katago-server/katago_gtp_bot.py /app/katago-server/
COPY katago-server/get_bot_app.py /app/katago-server/
COPY katago-server/requirements.txt /app/

# 复制整合的HTTP服务器脚本
COPY katago_analysis_server.py /app/

# 安装Python依赖（包含flask-cors）
RUN pip3 install --no-cache-dir -r /app/requirements.txt && \
    pip3 install --no-cache-dir flask-cors

# 复制配置文件
COPY configs/katago_gtp.cfg /app/configs/

RUN chmod +x /app/katago_analysis_server.py

# 创建健康检查脚本
RUN echo '#!/bin/bash' > /app/health_check.sh && \
    echo 'curl -f http://localhost:8080/select-move/katago_gtp_bot \' >> /app/health_check.sh && \
    echo '  -X POST \' >> /app/health_check.sh && \
    echo '  -H "Content-Type: application/json" \' >> /app/health_check.sh && \
    echo '  -d "{\"board_size\": 19, \"moves\": []}" \' >> /app/health_check.sh && \
    echo '  --max-time 30 || exit 1' >> /app/health_check.sh && \
    chmod +x /app/health_check.sh

# 暴露端口
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD /app/health_check.sh

# 启动HTTP服务器
CMD ["python3", "/app/katago_analysis_server.py"]